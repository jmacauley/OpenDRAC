/**
 * <pre>
 * The owner of the original code is Ciena Corporation.
 *
 * Portions created by the original owner are Copyright (C) 2004-2010
 * the original owner. All Rights Reserved.
 *
 * Portions created by other contributors are Copyright (C) the contributor.
 * All Rights Reserved.
 *
 * Contributor(s):
 *   (Contributors insert name & email here)
 *
 * This file is part of DRAC (Dynamic Resource Allocation Controller).
 *
 * DRAC is free software: you can redistribute it and/or modify it
 * under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * DRAC is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General
 * Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program.  If not, see <http://www.gnu.org/licenses/>.
 * </pre>
 */

package com.nortel.appcore.app.drac.server.neproxy.mediation.tl1client.protocol.tl1.engine;

import java.io.IOException;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.nortel.appcore.app.drac.server.neproxy.mediation.tl1client.protocol.tl1.OutputMessage;
import com.nortel.appcore.app.drac.server.neproxy.mediation.tl1client.protocol.tl1.Response;
import com.nortel.appcore.app.drac.server.neproxy.mediation.tl1client.protocol.tl1.TL1Constants;

/**
 * MessageTerminator parses the text block and terminator of autonomous and
 * output response messages. The rough format of the text block and terminator:
 * </p></p> <text block> ::= (<cr><lf>^^^<text line>)+ </p> <text line> ::=
 * <comment> | <unquoted line> | <quoted line> </p> <terminator> ::= ; | >
 * </p></p> MessageTerminator reads one text line, and then continually checks
 * for either another text line or the message terminator. When it finally
 * encounters the terminator, it forwards the populated message to its
 * dispatcher for delivery.
 */
final class MessageTerminator extends AbstractParseState

{
  
  private static final Logger log = LoggerFactory.getLogger(MessageTerminator.class);
	/** The state's "model", an object which stores parsed data. */
	private OutputMessage message;

	/**
	 * Forward the parsed message to the dispatcher, and remove all references to
	 * that message.
	 */
	public AbstractParseState forward() {
		// not using logDebug() allows us to avoid the expensive creation of
		// a string when we don't need to
		if (logTL1Parse) {
			logForward(message);
		}

		// forwards the message and returns the initial state
		AbstractParseState nextState = super.forward(message);
		message = null;
		return nextState;
	}

	/**
	 * Read text lines until the message terminator is read. Then forward the
	 * populated message to the dispatcher for delivery.
	 */
	@Override
	public AbstractParseState nextState() throws IOException,
	    InterruptedException {
		char character;

		try {
			while (true) {
				// strip leading whitespace

				getReader().skip(TL1Reader.lineEnds);
				getReader().skip(TL1Reader.spaces);

				/*
				 * The following lines of code were replaced by the above 2 lines in
				 * order to accomodate extra characters being generated by a DSM shelf.
				 * Modified: March 1, 2001 getReader().read("\r\n");
				 * getReader().skip(getReader().spaces);
				 */

				// strip the first character
				character = getReader().read();
				String textBlock;

				// a terminator character
				// remove it from the stream, fill out the message, and forward
				if (character == TL1Constants.COMPLETE
				    || character == TL1Constants.INCOMPLETE) {
					message.setTerminator(character);
					return forward();
				}

				// otherwise, must be a text line; parse it
				switch (character) {
				case '/':
					textBlock = getReader().readComment();
					break;
				case '"':
					textBlock = getReader().readQuotedLine();
					break;
				default:
					textBlock = character + getReader().readUnquotedLine();
					break;
				}

				message.addData(textBlock);
			}
		}
		catch (SyntaxException exception) {
			return logErrorAndForward(exception.getMessage(), message);
		}
	}

	/**
	 * Intended for the use of ReportIdentifier or ResponseIdentifier, so that
	 * they can pass their message object to this state.
	 */
	public void setMessage(OutputMessage output) {
		message = output;
	}

	/**
	 * Return a very short string that uniquely identifies the parsing state
	 * subclass, used in parsing machine debug messages.
	 */
	@Override
	protected String getDebugId() {
		return "t";
	}

	/**
	 * Forward the parsed message to the dispatcher, and remove all references to
	 * that message.
	 */
	private void logForward(OutputMessage toLog) {
		StringBuilder buffer = new StringBuilder(50);

		if (message instanceof Response) {
			buffer.append("\nPARSER: Forwarding response ");
		}
		else {
			buffer.append("\nPARSER: Forwarding report ");
		}

		buffer.append(toLog.getSid());
		buffer.append(' ');
		buffer.append(toLog.getDateAndTime());
		buffer.append(' ');
		buffer.append(toLog.getCorrelationTag());

		
	}
}
