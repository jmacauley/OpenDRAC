/**
 * <pre>
 * The owner of the original code is Ciena Corporation.
 *
 * Portions created by the original owner are Copyright (C) 2004-2010
 * the original owner. All Rights Reserved.
 *
 * Portions created by other contributors are Copyright (C) the contributor.
 * All Rights Reserved.
 *
 * Contributor(s):
 *   (Contributors insert name & email here)
 *
 * This file is part of DRAC (Dynamic Resource Allocation Controller).
 *
 * DRAC is free software: you can redistribute it and/or modify it
 * under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * DRAC is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General
 * Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program.  If not, see <http://www.gnu.org/licenses/>.
 * </pre>
 */

/* Generated By:JavaCC: Do not edit this line. Gentl1StubTokenManager.java */
package genstub;

@SuppressWarnings("unused")
public final class Gentl1StubTokenManager implements Gentl1StubConstants {
	public static java.io.PrintStream debugStream = System.out;

	public static final String[] jjstrLiteralImages = {
	    "",
	    null,
	    null,
	    null,
	    null,
	    null,
	    null,
	    "\55",
	    "\73",
	    "\72",
	    "\54",
	    null,
	    "\75",
	    "\133",
	    "\135",
	    "\74",
	    "\76",
	    "\43\103\115\104",
	    "\43\124\114\61\127\122\101\120\120\105\122",
	    "\43\116\105\124\131\120\105",
	    "\43\126\105\122\123\111\117\116",
	    "\43\124\117\124\101\114\103\117\115\115\101\116\104\123\116\125\115\102\105\122",
	    "\43\114\101\123\124\115\117\104\111\106\111\105\104\104\101\124\101",
	    "\43\104\105\123\103\122\111\120\124\111\117\116", "\43\122\105\123\120",
	    "\43\105\115\102\105\104\104\105\104", "\173", "\175", "\50", "\51",
	    "\43\103\117\115\115\105\116\124\123\124\101\122\124",
	    "\43\103\117\115\115\105\116\124\105\116\104",
	    "\43\102\114\117\103\113\123\105\120",
	    "\43\125\116\120\122\116\124\101\102\114\105", };

	public static final String[] lexStateNames = { "DEFAULT", };

	protected static char curChar;

	static int curLexState = 0;

	static int defaultLexState = 0;

	static StringBuffer image;

	static boolean[] jjbeenHere = new boolean[1];

	static int[] jjemptyColNo = new int[1];

	static int[] jjemptyLineNo = new int[1];

	static int jjimageLen;

	static int jjmatchedKind;

	static int jjmatchedPos;

	static int jjnewStateCnt;

	static final int[] jjnextStates = {};

	static int jjround;

	static final long[] jjtoSkip = { 0x1eL, };

	static final long[] jjtoToken = { 0x3ffffffe1L, };

	static int lengthOfMatch;

	private static SimpleCharStream input_stream;

	private static int[] jjrounds = new int[2];

	private static int[] jjstateSet = new int[4];

	public Gentl1StubTokenManager(SimpleCharStream stream) {
		if (input_stream != null) {
			throw new TokenMgrError(
			    "ERROR: Second call to constructor of static lexer. You must use ReInit() to initialize the static variables.",
			    TokenMgrError.STATIC_LEXER_ERROR);
		}
		input_stream = stream;
	}

	public Gentl1StubTokenManager(SimpleCharStream stream, int lexState) {
		this(stream);
		SwitchTo(lexState);
	}

	public static Token getNextToken() {
		int kind;
		Token specialToken = null;
		Token matchedToken;
		int curPos = 0;

		EOFLoop: for (;;) {
			try {
				curChar = SimpleCharStream.BeginToken();
			}
			catch (java.io.IOException e) {
				jjmatchedKind = 0;
				matchedToken = jjFillToken();
				return matchedToken;
			}
			image = null;
			jjimageLen = 0;

			try {
				SimpleCharStream.backup(0);
				while (curChar <= 13 && (0x2600L & 1L << curChar) != 0L) {
					curChar = SimpleCharStream.BeginToken();
				}
			}
			catch (java.io.IOException e1) {
				continue EOFLoop;
			}
			jjmatchedKind = 5;
			jjmatchedPos = -1;
			curPos = 0;
			curPos = jjMoveStringLiteralDfa0_0();
			if (jjmatchedKind != 0x7fffffff) {
				if (jjmatchedPos + 1 < curPos) {
					SimpleCharStream.backup(curPos - jjmatchedPos - 1);
				}
				if ((jjtoToken[jjmatchedKind >> 6] & 1L << (jjmatchedKind & 077)) != 0L) {
					matchedToken = jjFillToken();
					TokenLexicalActions(matchedToken);
					return matchedToken;
				}
				else {
					continue EOFLoop;
				}
			}
			int error_line = SimpleCharStream.getEndLine();
			int error_column = SimpleCharStream.getEndColumn();
			String error_after = null;
			boolean EOFSeen = false;
			try {
				SimpleCharStream.readChar();
				SimpleCharStream.backup(1);
			}
			catch (java.io.IOException e1) {
				EOFSeen = true;
				error_after = curPos <= 1 ? "" : SimpleCharStream.GetImage();
				if (curChar == '\n' || curChar == '\r') {
					error_line++;
					error_column = 0;
				}
				else {
					error_column++;
				}
			}
			if (!EOFSeen) {
				SimpleCharStream.backup(1);
				error_after = curPos <= 1 ? "" : SimpleCharStream.GetImage();
			}
			throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column,
			    error_after, curChar, TokenMgrError.LEXICAL_ERROR);
		}
	}

	public static void ReInit(SimpleCharStream stream) {
		jjmatchedPos = jjnewStateCnt = 0;
		curLexState = defaultLexState;
		input_stream = stream;
		ReInitRounds();
	}

	public static void ReInit(SimpleCharStream stream, int lexState) {
		ReInit(stream);
		SwitchTo(lexState);
	}

	public static void setDebugStream(java.io.PrintStream ds) {
		debugStream = ds;
	}

	public static void SwitchTo(int lexState) {
		if (lexState >= 1 || lexState < 0) {
			throw new TokenMgrError("Error: Ignoring invalid lexical state : "
			    + lexState + ". State unchanged.",
			    TokenMgrError.INVALID_LEXICAL_STATE);
		}
		else {
			curLexState = lexState;
		}
	}

	static void TokenLexicalActions(Token matchedToken) {
		switch (jjmatchedKind) {
		case 0:
			break;
		case 5:
			if (jjmatchedPos == -1) {
				if (jjbeenHere[0]
				    && jjemptyLineNo[0] == SimpleCharStream.getBeginLine()
				    && jjemptyColNo[0] == SimpleCharStream.getBeginColumn()) {
					throw new TokenMgrError(
					    ("Error: Bailing out of infinite loop caused by repeated empty string matches at line "
					        + SimpleCharStream.getBeginLine()
					        + ", column "
					        + SimpleCharStream.getBeginColumn() + "."),
					    TokenMgrError.LOOP_DETECTED);
				}
				jjemptyLineNo[0] = SimpleCharStream.getBeginLine();
				jjemptyColNo[0] = SimpleCharStream.getBeginColumn();
				jjbeenHere[0] = true;
			}
			break;
		case 6:
			break;
		case 7:
			break;
		case 8:
			break;
		case 9:
			break;
		case 10:
			break;
		case 11:
			break;
		case 12:
			break;
		case 13:
			break;
		case 14:
			break;
		case 15:
			break;
		case 16:
			break;
		case 17:
			break;
		case 18:
			break;
		case 19:
			break;
		case 20:
			break;
		case 21:
			break;
		case 22:
			break;
		case 23:
			break;
		case 24:
			break;
		case 25:
			break;
		case 26:
			break;
		case 27:
			break;
		case 28:
			break;
		case 29:
			break;
		case 30:
			break;
		case 31:
			break;
		case 32:
			break;
		case 33:
			break;
		default:
			break;
		}
	}

	private static void jjAddStates(int start, int end) {
		do {
			jjstateSet[jjnewStateCnt++] = jjnextStates[start];
		}
		while (start++ != end);
	}

	private static void jjCheckNAdd(int state) {
		if (jjrounds[state] != jjround) {
			jjstateSet[jjnewStateCnt++] = state;
			jjrounds[state] = jjround;
		}
	}

	private static void jjCheckNAddStates(int start) {
		jjCheckNAdd(jjnextStates[start]);
		jjCheckNAdd(jjnextStates[start + 1]);
	}

	private static void jjCheckNAddStates(int start, int end) {
		do {
			jjCheckNAdd(jjnextStates[start]);
		}
		while (start++ != end);
	}

	private static void jjCheckNAddTwoStates(int state1, int state2) {
		jjCheckNAdd(state1);
		jjCheckNAdd(state2);
	}

	private static Token jjFillToken() {
		Token t = Token.newToken(jjmatchedKind);
		t.kind = jjmatchedKind;
		if (jjmatchedPos < 0) {
			t.image = "";
			t.beginLine = t.endLine = SimpleCharStream.getBeginLine();
			t.beginColumn = t.endColumn = SimpleCharStream.getBeginColumn();
		}
		else {
			String im = jjstrLiteralImages[jjmatchedKind];
			t.image = im == null ? SimpleCharStream.GetImage() : im;
			t.beginLine = SimpleCharStream.getBeginLine();
			t.beginColumn = SimpleCharStream.getBeginColumn();
			t.endLine = SimpleCharStream.getEndLine();
			t.endColumn = SimpleCharStream.getEndColumn();
		}
		return t;
	}

	private static int jjMoveNfa_0(int startState, int curPos) {
		int[] nextStates;
		int startsAt = 0;
		jjnewStateCnt = 2;
		int i = 1;
		jjstateSet[0] = startState;
		int j, kind = 0x7fffffff;
		for (;;) {
			if (++jjround == 0x7fffffff) {
				ReInitRounds();
			}
			if (curChar < 64) {
				long l = 1L << curChar;
				MatchLoop: do {
					switch (jjstateSet[--i]) {
					case 2:
						if ((0x3ff400100000000L & l) != 0L) {
							if (kind > 5) {
								kind = 5;
							}
							jjCheckNAdd(0);
						}
						else if ((0x847200000000L & l) != 0L) {
							if (kind > 6) {
								kind = 6;
							}
							jjCheckNAdd(1);
						}
						break;
					case 0:
						if ((0x3ff400100000000L & l) == 0L) {
							break;
						}
						kind = 5;
						jjCheckNAdd(0);
						break;
					case 1:
						if ((0x847200000000L & l) == 0L) {
							break;
						}
						kind = 6;
						jjCheckNAdd(1);
						break;
					default:
						break;
					}
				}
				while (i != startsAt);
			}
			else if (curChar < 128) {
				long l = 1L << (curChar & 077);
				MatchLoop: do {
					switch (jjstateSet[--i]) {
					case 2:
						if ((0x47fffffe57ffffffL & l) != 0L) {
							if (kind > 6) {
								kind = 6;
							}
							jjCheckNAdd(1);
						}
						if ((0x7fffffe87fffffeL & l) != 0L) {
							if (kind > 5) {
								kind = 5;
							}
							jjCheckNAdd(0);
						}
						break;
					case 0:
						if ((0x7fffffe87fffffeL & l) == 0L) {
							break;
						}
						if (kind > 5) {
							kind = 5;
						}
						jjCheckNAdd(0);
						break;
					case 1:
						if ((0x47fffffe57ffffffL & l) == 0L) {
							break;
						}
						if (kind > 6) {
							kind = 6;
						}
						jjCheckNAdd(1);
						break;
					default:
						break;
					}
				}
				while (i != startsAt);
			}
			else {
				int i2 = (curChar & 0xff) >> 6;
				long l2 = 1L << (curChar & 077);
				MatchLoop: do {
					switch (jjstateSet[--i]) {
					default:
						break;
					}
				}
				while (i != startsAt);
			}
			if (kind != 0x7fffffff) {
				jjmatchedKind = kind;
				jjmatchedPos = curPos;
				kind = 0x7fffffff;
			}
			++curPos;
			if ((i = jjnewStateCnt) == (startsAt = 2 - (jjnewStateCnt = startsAt))) {
				return curPos;
			}
			try {
				curChar = SimpleCharStream.readChar();
			}
			catch (java.io.IOException e) {
				return curPos;
			}
		}
	}

	private static int jjMoveStringLiteralDfa0_0() {
		switch (curChar) {
		case 32:
			return jjStartNfaWithStates_0(0, 1, 0);
		case 35:
			return jjMoveStringLiteralDfa1_0(0x3c3fe0000L);
		case 40:
			return jjStopAtPos(0, 28);
		case 41:
			return jjStopAtPos(0, 29);
		case 44:
			return jjStopAtPos(0, 10);
		case 45:
			return jjStopAtPos(0, 7);
		case 58:
			return jjStopAtPos(0, 9);
		case 59:
			return jjStopAtPos(0, 8);
		case 60:
			return jjStopAtPos(0, 15);
		case 61:
			return jjStopAtPos(0, 12);
		case 62:
			return jjStopAtPos(0, 16);
		case 91:
			return jjStopAtPos(0, 13);
		case 93:
			return jjStopAtPos(0, 14);
		case 123:
			return jjStopAtPos(0, 26);
		case 125:
			return jjStopAtPos(0, 27);
		default:
			return jjMoveNfa_0(2, 0);
		}
	}

	private static int jjMoveStringLiteralDfa1_0(long active0) {
		try {
			curChar = SimpleCharStream.readChar();
		}
		catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(0, active0);
			return 1;
		}
		switch (curChar) {
		case 66:
			return jjMoveStringLiteralDfa2_0(active0, 0x100000000L);
		case 67:
			return jjMoveStringLiteralDfa2_0(active0, 0xc0020000L);
		case 68:
			return jjMoveStringLiteralDfa2_0(active0, 0x800000L);
		case 69:
			return jjMoveStringLiteralDfa2_0(active0, 0x2000000L);
		case 76:
			return jjMoveStringLiteralDfa2_0(active0, 0x400000L);
		case 78:
			return jjMoveStringLiteralDfa2_0(active0, 0x80000L);
		case 82:
			return jjMoveStringLiteralDfa2_0(active0, 0x1000000L);
		case 84:
			return jjMoveStringLiteralDfa2_0(active0, 0x240000L);
		case 85:
			return jjMoveStringLiteralDfa2_0(active0, 0x200000000L);
		case 86:
			return jjMoveStringLiteralDfa2_0(active0, 0x100000L);
		default:
			break;
		}
		return jjStartNfa_0(0, active0);
	}

	private static int jjMoveStringLiteralDfa10_0(long old0, long active0) {
		if ((active0 &= old0) == 0L) {
			return jjStartNfa_0(8, old0);
		}
		try {
			curChar = SimpleCharStream.readChar();
		}
		catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(9, active0);
			return 10;
		}
		switch (curChar) {
		case 65:
			return jjMoveStringLiteralDfa11_0(active0, 0x40200000L);
		case 68:
			if ((active0 & 0x80000000L) != 0L) {
				return jjStopAtPos(10, 31);
			}
			break;
		case 69:
			if ((active0 & 0x200000000L) != 0L) {
				return jjStopAtPos(10, 33);
			}
			break;
		case 73:
			return jjMoveStringLiteralDfa11_0(active0, 0x400000L);
		case 79:
			return jjMoveStringLiteralDfa11_0(active0, 0x800000L);
		case 82:
			if ((active0 & 0x40000L) != 0L) {
				return jjStopAtPos(10, 18);
			}
			break;
		default:
			break;
		}
		return jjStartNfa_0(9, active0);
	}

	private static int jjMoveStringLiteralDfa11_0(long old0, long active0) {
		if ((active0 &= old0) == 0L) {
			return jjStartNfa_0(9, old0);
		}
		try {
			curChar = SimpleCharStream.readChar();
		}
		catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(10, active0);
			return 11;
		}
		switch (curChar) {
		case 69:
			return jjMoveStringLiteralDfa12_0(active0, 0x400000L);
		case 78:
			if ((active0 & 0x800000L) != 0L) {
				return jjStopAtPos(11, 23);
			}
			return jjMoveStringLiteralDfa12_0(active0, 0x200000L);
		case 82:
			return jjMoveStringLiteralDfa12_0(active0, 0x40000000L);
		default:
			break;
		}
		return jjStartNfa_0(10, active0);
	}

	private static int jjMoveStringLiteralDfa12_0(long old0, long active0) {
		if ((active0 &= old0) == 0L) {
			return jjStartNfa_0(10, old0);
		}
		try {
			curChar = SimpleCharStream.readChar();
		}
		catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(11, active0);
			return 12;
		}
		switch (curChar) {
		case 68:
			return jjMoveStringLiteralDfa13_0(active0, 0x600000L);
		case 84:
			if ((active0 & 0x40000000L) != 0L) {
				return jjStopAtPos(12, 30);
			}
			break;
		default:
			break;
		}
		return jjStartNfa_0(11, active0);
	}

	private static int jjMoveStringLiteralDfa13_0(long old0, long active0) {
		if ((active0 &= old0) == 0L) {
			return jjStartNfa_0(11, old0);
		}
		try {
			curChar = SimpleCharStream.readChar();
		}
		catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(12, active0);
			return 13;
		}
		switch (curChar) {
		case 68:
			return jjMoveStringLiteralDfa14_0(active0, 0x400000L);
		case 83:
			return jjMoveStringLiteralDfa14_0(active0, 0x200000L);
		default:
			break;
		}
		return jjStartNfa_0(12, active0);
	}

	private static int jjMoveStringLiteralDfa14_0(long old0, long active0) {
		if ((active0 &= old0) == 0L) {
			return jjStartNfa_0(12, old0);
		}
		try {
			curChar = SimpleCharStream.readChar();
		}
		catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(13, active0);
			return 14;
		}
		switch (curChar) {
		case 65:
			return jjMoveStringLiteralDfa15_0(active0, 0x400000L);
		case 78:
			return jjMoveStringLiteralDfa15_0(active0, 0x200000L);
		default:
			break;
		}
		return jjStartNfa_0(13, active0);
	}

	private static int jjMoveStringLiteralDfa15_0(long old0, long active0) {
		if ((active0 &= old0) == 0L) {
			return jjStartNfa_0(13, old0);
		}
		try {
			curChar = SimpleCharStream.readChar();
		}
		catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(14, active0);
			return 15;
		}
		switch (curChar) {
		case 84:
			return jjMoveStringLiteralDfa16_0(active0, 0x400000L);
		case 85:
			return jjMoveStringLiteralDfa16_0(active0, 0x200000L);
		default:
			break;
		}
		return jjStartNfa_0(14, active0);
	}

	private static int jjMoveStringLiteralDfa16_0(long old0, long active0) {
		if ((active0 &= old0) == 0L) {
			return jjStartNfa_0(14, old0);
		}
		try {
			curChar = SimpleCharStream.readChar();
		}
		catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(15, active0);
			return 16;
		}
		switch (curChar) {
		case 65:
			if ((active0 & 0x400000L) != 0L) {
				return jjStopAtPos(16, 22);
			}
			break;
		case 77:
			return jjMoveStringLiteralDfa17_0(active0, 0x200000L);
		default:
			break;
		}
		return jjStartNfa_0(15, active0);
	}

	private static int jjMoveStringLiteralDfa17_0(long old0, long active0) {
		if ((active0 &= old0) == 0L) {
			return jjStartNfa_0(15, old0);
		}
		try {
			curChar = SimpleCharStream.readChar();
		}
		catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(16, active0);
			return 17;
		}
		switch (curChar) {
		case 66:
			return jjMoveStringLiteralDfa18_0(active0, 0x200000L);
		default:
			break;
		}
		return jjStartNfa_0(16, active0);
	}

	private static int jjMoveStringLiteralDfa18_0(long old0, long active0) {
		if ((active0 &= old0) == 0L) {
			return jjStartNfa_0(16, old0);
		}
		try {
			curChar = SimpleCharStream.readChar();
		}
		catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(17, active0);
			return 18;
		}
		switch (curChar) {
		case 69:
			return jjMoveStringLiteralDfa19_0(active0, 0x200000L);
		default:
			break;
		}
		return jjStartNfa_0(17, active0);
	}

	private static int jjMoveStringLiteralDfa19_0(long old0, long active0) {
		if ((active0 &= old0) == 0L) {
			return jjStartNfa_0(17, old0);
		}
		try {
			curChar = SimpleCharStream.readChar();
		}
		catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(18, active0);
			return 19;
		}
		switch (curChar) {
		case 82:
			if ((active0 & 0x200000L) != 0L) {
				return jjStopAtPos(19, 21);
			}
			break;
		default:
			break;
		}
		return jjStartNfa_0(18, active0);
	}

	private static int jjMoveStringLiteralDfa2_0(long old0, long active0) {
		if ((active0 &= old0) == 0L) {
			return jjStartNfa_0(0, old0);
		}
		try {
			curChar = SimpleCharStream.readChar();
		}
		catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(1, active0);
			return 2;
		}
		switch (curChar) {
		case 65:
			return jjMoveStringLiteralDfa3_0(active0, 0x400000L);
		case 69:
			return jjMoveStringLiteralDfa3_0(active0, 0x1980000L);
		case 76:
			return jjMoveStringLiteralDfa3_0(active0, 0x100040000L);
		case 77:
			return jjMoveStringLiteralDfa3_0(active0, 0x2020000L);
		case 78:
			return jjMoveStringLiteralDfa3_0(active0, 0x200000000L);
		case 79:
			return jjMoveStringLiteralDfa3_0(active0, 0xc0200000L);
		default:
			break;
		}
		return jjStartNfa_0(1, active0);
	}

	private static int jjMoveStringLiteralDfa3_0(long old0, long active0) {
		if ((active0 &= old0) == 0L) {
			return jjStartNfa_0(1, old0);
		}
		try {
			curChar = SimpleCharStream.readChar();
		}
		catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(2, active0);
			return 3;
		}
		switch (curChar) {
		case 49:
			return jjMoveStringLiteralDfa4_0(active0, 0x40000L);
		case 66:
			return jjMoveStringLiteralDfa4_0(active0, 0x2000000L);
		case 68:
			if ((active0 & 0x20000L) != 0L) {
				return jjStopAtPos(3, 17);
			}
			break;
		case 77:
			return jjMoveStringLiteralDfa4_0(active0, 0xc0000000L);
		case 79:
			return jjMoveStringLiteralDfa4_0(active0, 0x100000000L);
		case 80:
			return jjMoveStringLiteralDfa4_0(active0, 0x200000000L);
		case 82:
			return jjMoveStringLiteralDfa4_0(active0, 0x100000L);
		case 83:
			return jjMoveStringLiteralDfa4_0(active0, 0x1c00000L);
		case 84:
			return jjMoveStringLiteralDfa4_0(active0, 0x280000L);
		default:
			break;
		}
		return jjStartNfa_0(2, active0);
	}

	private static int jjMoveStringLiteralDfa4_0(long old0, long active0) {
		if ((active0 &= old0) == 0L) {
			return jjStartNfa_0(2, old0);
		}
		try {
			curChar = SimpleCharStream.readChar();
		}
		catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(3, active0);
			return 4;
		}
		switch (curChar) {
		case 65:
			return jjMoveStringLiteralDfa5_0(active0, 0x200000L);
		case 67:
			return jjMoveStringLiteralDfa5_0(active0, 0x100800000L);
		case 69:
			return jjMoveStringLiteralDfa5_0(active0, 0x2000000L);
		case 77:
			return jjMoveStringLiteralDfa5_0(active0, 0xc0000000L);
		case 80:
			if ((active0 & 0x1000000L) != 0L) {
				return jjStopAtPos(4, 24);
			}
			break;
		case 82:
			return jjMoveStringLiteralDfa5_0(active0, 0x200000000L);
		case 83:
			return jjMoveStringLiteralDfa5_0(active0, 0x100000L);
		case 84:
			return jjMoveStringLiteralDfa5_0(active0, 0x400000L);
		case 87:
			return jjMoveStringLiteralDfa5_0(active0, 0x40000L);
		case 89:
			return jjMoveStringLiteralDfa5_0(active0, 0x80000L);
		default:
			break;
		}
		return jjStartNfa_0(3, active0);
	}

	private static int jjMoveStringLiteralDfa5_0(long old0, long active0) {
		if ((active0 &= old0) == 0L) {
			return jjStartNfa_0(3, old0);
		}
		try {
			curChar = SimpleCharStream.readChar();
		}
		catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(4, active0);
			return 5;
		}
		switch (curChar) {
		case 68:
			return jjMoveStringLiteralDfa6_0(active0, 0x2000000L);
		case 69:
			return jjMoveStringLiteralDfa6_0(active0, 0xc0000000L);
		case 73:
			return jjMoveStringLiteralDfa6_0(active0, 0x100000L);
		case 75:
			return jjMoveStringLiteralDfa6_0(active0, 0x100000000L);
		case 76:
			return jjMoveStringLiteralDfa6_0(active0, 0x200000L);
		case 77:
			return jjMoveStringLiteralDfa6_0(active0, 0x400000L);
		case 78:
			return jjMoveStringLiteralDfa6_0(active0, 0x200000000L);
		case 80:
			return jjMoveStringLiteralDfa6_0(active0, 0x80000L);
		case 82:
			return jjMoveStringLiteralDfa6_0(active0, 0x840000L);
		default:
			break;
		}
		return jjStartNfa_0(4, active0);
	}

	private static int jjMoveStringLiteralDfa6_0(long old0, long active0) {
		if ((active0 &= old0) == 0L) {
			return jjStartNfa_0(4, old0);
		}
		try {
			curChar = SimpleCharStream.readChar();
		}
		catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(5, active0);
			return 6;
		}
		switch (curChar) {
		case 65:
			return jjMoveStringLiteralDfa7_0(active0, 0x40000L);
		case 67:
			return jjMoveStringLiteralDfa7_0(active0, 0x200000L);
		case 68:
			return jjMoveStringLiteralDfa7_0(active0, 0x2000000L);
		case 69:
			if ((active0 & 0x80000L) != 0L) {
				return jjStopAtPos(6, 19);
			}
			break;
		case 73:
			return jjMoveStringLiteralDfa7_0(active0, 0x800000L);
		case 78:
			return jjMoveStringLiteralDfa7_0(active0, 0xc0000000L);
		case 79:
			return jjMoveStringLiteralDfa7_0(active0, 0x500000L);
		case 83:
			return jjMoveStringLiteralDfa7_0(active0, 0x100000000L);
		case 84:
			return jjMoveStringLiteralDfa7_0(active0, 0x200000000L);
		default:
			break;
		}
		return jjStartNfa_0(5, active0);
	}

	private static int jjMoveStringLiteralDfa7_0(long old0, long active0) {
		if ((active0 &= old0) == 0L) {
			return jjStartNfa_0(5, old0);
		}
		try {
			curChar = SimpleCharStream.readChar();
		}
		catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(6, active0);
			return 7;
		}
		switch (curChar) {
		case 65:
			return jjMoveStringLiteralDfa8_0(active0, 0x200000000L);
		case 68:
			return jjMoveStringLiteralDfa8_0(active0, 0x400000L);
		case 69:
			return jjMoveStringLiteralDfa8_0(active0, 0x102000000L);
		case 78:
			if ((active0 & 0x100000L) != 0L) {
				return jjStopAtPos(7, 20);
			}
			break;
		case 79:
			return jjMoveStringLiteralDfa8_0(active0, 0x200000L);
		case 80:
			return jjMoveStringLiteralDfa8_0(active0, 0x840000L);
		case 84:
			return jjMoveStringLiteralDfa8_0(active0, 0xc0000000L);
		default:
			break;
		}
		return jjStartNfa_0(6, active0);
	}

	private static int jjMoveStringLiteralDfa8_0(long old0, long active0) {
		if ((active0 &= old0) == 0L) {
			return jjStartNfa_0(6, old0);
		}
		try {
			curChar = SimpleCharStream.readChar();
		}
		catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(7, active0);
			return 8;
		}
		switch (curChar) {
		case 66:
			return jjMoveStringLiteralDfa9_0(active0, 0x200000000L);
		case 68:
			if ((active0 & 0x2000000L) != 0L) {
				return jjStopAtPos(8, 25);
			}
			break;
		case 69:
			return jjMoveStringLiteralDfa9_0(active0, 0x80000000L);
		case 73:
			return jjMoveStringLiteralDfa9_0(active0, 0x400000L);
		case 77:
			return jjMoveStringLiteralDfa9_0(active0, 0x200000L);
		case 80:
			if ((active0 & 0x100000000L) != 0L) {
				return jjStopAtPos(8, 32);
			}
			return jjMoveStringLiteralDfa9_0(active0, 0x40000L);
		case 83:
			return jjMoveStringLiteralDfa9_0(active0, 0x40000000L);
		case 84:
			return jjMoveStringLiteralDfa9_0(active0, 0x800000L);
		default:
			break;
		}
		return jjStartNfa_0(7, active0);
	}

	private static int jjMoveStringLiteralDfa9_0(long old0, long active0) {
		if ((active0 &= old0) == 0L) {
			return jjStartNfa_0(7, old0);
		}
		try {
			curChar = SimpleCharStream.readChar();
		}
		catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(8, active0);
			return 9;
		}
		switch (curChar) {
		case 69:
			return jjMoveStringLiteralDfa10_0(active0, 0x40000L);
		case 70:
			return jjMoveStringLiteralDfa10_0(active0, 0x400000L);
		case 73:
			return jjMoveStringLiteralDfa10_0(active0, 0x800000L);
		case 76:
			return jjMoveStringLiteralDfa10_0(active0, 0x200000000L);
		case 77:
			return jjMoveStringLiteralDfa10_0(active0, 0x200000L);
		case 78:
			return jjMoveStringLiteralDfa10_0(active0, 0x80000000L);
		case 84:
			return jjMoveStringLiteralDfa10_0(active0, 0x40000000L);
		default:
			break;
		}
		return jjStartNfa_0(8, active0);
	}

	private static int jjStartNfa_0(int pos, long active0) {
		return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
	}

	private static int jjStartNfaWithStates_0(int pos, int kind, int state) {
		jjmatchedKind = kind;
		jjmatchedPos = pos;
		try {
			curChar = SimpleCharStream.readChar();
		}
		catch (java.io.IOException e) {
			return pos + 1;
		}
		return jjMoveNfa_0(state, pos + 1);
	}

	private static int jjStopAtPos(int pos, int kind) {
		jjmatchedKind = kind;
		jjmatchedPos = pos;
		return pos + 1;
	}

	private static int jjStopStringLiteralDfa_0(int pos, long active0) {
		switch (pos) {
		case 0:
			if ((active0 & 0x2L) != 0L) {
				return 0;
			}
			return -1;
		default:
			return -1;
		}
	}

	private static void ReInitRounds() {
		int i;
		jjround = 0x80000001;
		for (i = 2; i-- > 0;) {
			jjrounds[i] = 0x80000000;
		}
	}
}
