/**
 * <pre>
 * The owner of the original code is Ciena Corporation.
 *
 * Portions created by the original owner are Copyright (C) 2004-2010
 * the original owner. All Rights Reserved.
 *
 * Portions created by other contributors are Copyright (C) the contributor.
 * All Rights Reserved.
 *
 * Contributor(s):
 *   (Contributors insert name & email here)
 *
 * This file is part of DRAC (Dynamic Resource Allocation Controller).
 *
 * DRAC is free software: you can redistribute it and/or modify it
 * under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * DRAC is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General
 * Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program.  If not, see <http://www.gnu.org/licenses/>.
 * </pre>
 */

/* Generated By:JavaCC: Do not edit this line. SimpleCharStream.java Version 2.1 */
package genstub;

/**
 * An implementation of interface CharStream, where the stream is assumed to
 * contain only ASCII characters (without unicode processing).
 */

public final class SimpleCharStream {
	public static int bufpos = -1;
	public static final boolean staticFlag = true;
	static int available;
	static int bufsize;
	static int tokenBegin;
	private static int bufcolumn[];
	private static char[] buffer;

	private static int bufline[];
	private static int column = 0;

	private static int inBuf = 0;
	private static java.io.Reader inputStream;

	private static int line = 1;

	private static int maxNextCharInd = 0;
	private static boolean prevCharIsCR = false;
	private static boolean prevCharIsLF = false;

	public SimpleCharStream(java.io.InputStream dstream) {
		this(dstream, 1, 1, 4096);
	}

	public SimpleCharStream(java.io.InputStream dstream, int startline,
	    int startcolumn) {
		this(dstream, startline, startcolumn, 4096);
	}

	public SimpleCharStream(java.io.InputStream dstream, int startline,
	    int startcolumn, int buffersize) {
		this(new java.io.InputStreamReader(dstream), startline, startcolumn, 4096);
	}

	public SimpleCharStream(java.io.Reader dstream) {
		this(dstream, 1, 1, 4096);
	}

	public SimpleCharStream(java.io.Reader dstream, int startline, int startcolumn) {
		this(dstream, startline, startcolumn, 4096);
	}

	public SimpleCharStream(java.io.Reader dstream, int startline,
	    int startcolumn, int buffersize) {
		if (inputStream != null) {
			throw new Error(
			    "\n   ERROR: Second call to the constructor of a static SimpleCharStream.  You must\n"
			        + "       either use ReInit() or set the JavaCC option STATIC to false\n"
			        + "       during the generation of this class.");
		}
		inputStream = dstream;
		line = startline;
		column = startcolumn - 1;

		available = bufsize = buffersize;
		buffer = new char[buffersize];
		bufline = new int[buffersize];
		bufcolumn = new int[buffersize];
	}

	/**
	 * Method to adjust line and column numbers for the start of a token.<BR>
	 */
	public static void adjustBeginLineColumn(int newLine, int newCol) {
		int start = tokenBegin;
		int len;

		if (bufpos >= tokenBegin) {
			len = bufpos - tokenBegin + inBuf + 1;
		}
		else {
			len = bufsize - tokenBegin + bufpos + 1 + inBuf;
		}

		int i = 0, j = 0, k = 0;
		int nextColDiff = 0, columnDiff = 0;

		while (i < len
		    && bufline[j = start % bufsize] == bufline[k = ++start % bufsize]) {
			bufline[j] = newLine;
			nextColDiff = columnDiff + bufcolumn[k] - bufcolumn[j];
			bufcolumn[j] = newCol + columnDiff;
			columnDiff = nextColDiff;
			i++;
		}

		if (i < len) {
			bufline[j] = newLine++;
			bufcolumn[j] = newCol + columnDiff;

			while (i++ < len) {
				if (bufline[j = start % bufsize] != bufline[++start % bufsize]) {
					bufline[j] = newLine++;
				}
				else {
					bufline[j] = newLine;
				}
			}
		}

		line = bufline[j];
		column = bufcolumn[j];
	}

	public static void backup(int amount) {

		inBuf += amount;
		if ((bufpos -= amount) < 0) {
			bufpos += bufsize;
		}
	}

	public static char BeginToken() throws java.io.IOException {
		tokenBegin = -1;
		char c = readChar();
		tokenBegin = bufpos;

		return c;
	}

	public static void Done() {
		buffer = null;
		bufline = null;
		bufcolumn = null;
	}

	public static int getBeginColumn() {
		return bufcolumn[tokenBegin];
	}

	public static int getBeginLine() {
		return bufline[tokenBegin];
	}

	/**
	 * @deprecated
	 * @see #getEndColumn
	 */

	@Deprecated
	public static int getColumn() {
		return bufcolumn[bufpos];
	}

	public static int getEndColumn() {
		return bufcolumn[bufpos];
	}

	public static int getEndLine() {
		return bufline[bufpos];
	}

	public static String GetImage() {
		if (bufpos >= tokenBegin) {
			return new String(buffer, tokenBegin, bufpos - tokenBegin + 1);
		}
		else {
			return new String(buffer, tokenBegin, bufsize - tokenBegin)
			    + new String(buffer, 0, bufpos + 1);
		}
	}

	/**
	 * @deprecated
	 * @see #getEndLine
	 */

	@Deprecated
	public static int getLine() {
		return bufline[bufpos];
	}

	public static char[] GetSuffix(int len) {
		char[] ret = new char[len];

		if (bufpos + 1 >= len) {
			System.arraycopy(buffer, bufpos - len + 1, ret, 0, len);
		}
		else {
			System.arraycopy(buffer, bufsize - (len - bufpos - 1), ret, 0, len
			    - bufpos - 1);
			System.arraycopy(buffer, 0, ret, len - bufpos - 1, bufpos + 1);
		}

		return ret;
	}

	public static char readChar() throws java.io.IOException {
		if (inBuf > 0) {
			--inBuf;

			if (++bufpos == bufsize) {
				bufpos = 0;
			}

			return buffer[bufpos];
		}

		if (++bufpos >= maxNextCharInd) {
			FillBuff();
		}

		char c = buffer[bufpos];

		UpdateLineColumn(c);
		return c;
	}

	private static void ExpandBuff(boolean wrapAround) {
		char[] newbuffer = new char[bufsize + 2048];
		int newbufline[] = new int[bufsize + 2048];
		int newbufcolumn[] = new int[bufsize + 2048];

		try {
			if (wrapAround) {
				System
				    .arraycopy(buffer, tokenBegin, newbuffer, 0, bufsize - tokenBegin);
				System.arraycopy(buffer, 0, newbuffer, bufsize - tokenBegin, bufpos);
				buffer = newbuffer;

				System.arraycopy(bufline, tokenBegin, newbufline, 0, bufsize
				    - tokenBegin);
				System.arraycopy(bufline, 0, newbufline, bufsize - tokenBegin, bufpos);
				bufline = newbufline;

				System.arraycopy(bufcolumn, tokenBegin, newbufcolumn, 0, bufsize
				    - tokenBegin);
				System.arraycopy(bufcolumn, 0, newbufcolumn, bufsize - tokenBegin,
				    bufpos);
				bufcolumn = newbufcolumn;

				maxNextCharInd = bufpos += bufsize - tokenBegin;
			}
			else {
				System
				    .arraycopy(buffer, tokenBegin, newbuffer, 0, bufsize - tokenBegin);
				buffer = newbuffer;

				System.arraycopy(bufline, tokenBegin, newbufline, 0, bufsize
				    - tokenBegin);
				bufline = newbufline;

				System.arraycopy(bufcolumn, tokenBegin, newbufcolumn, 0, bufsize
				    - tokenBegin);
				bufcolumn = newbufcolumn;

				maxNextCharInd = bufpos -= tokenBegin;
			}
		}
		catch (Exception t) {
			throw new Error(t.getMessage(), t);
		}

		bufsize += 2048;
		available = bufsize;
		tokenBegin = 0;
	}

	private static void FillBuff() throws java.io.IOException {
		if (maxNextCharInd == available) {
			if (available == bufsize) {
				if (tokenBegin > 2048) {
					bufpos = maxNextCharInd = 0;
					available = tokenBegin;
				}
				else if (tokenBegin < 0) {
					bufpos = maxNextCharInd = 0;
				}
				else {
					ExpandBuff(false);
				}
			}
			else if (available > tokenBegin) {
				available = bufsize;
			}
			else if (tokenBegin - available < 2048) {
				ExpandBuff(true);
			}
			else {
				available = tokenBegin;
			}
		}

		int i;
		try {
			if ((i = inputStream.read(buffer, maxNextCharInd, available
			    - maxNextCharInd)) == -1) {
				inputStream.close();
				throw new java.io.IOException();
			}
			else {
				maxNextCharInd += i;
			}
			return;
		}
		catch (java.io.IOException e) {
			--bufpos;
			backup(0);
			if (tokenBegin == -1) {
				tokenBegin = bufpos;
			}
			throw e;
		}
	}

	private static void UpdateLineColumn(char c) {
		column++;

		if (prevCharIsLF) {
			prevCharIsLF = false;
			line += column = 1;
		}
		else if (prevCharIsCR) {
			prevCharIsCR = false;
			if (c == '\n') {
				prevCharIsLF = true;
			}
			else {
				line += column = 1;
			}
		}

		switch (c) {
		case '\r':
			prevCharIsCR = true;
			break;
		case '\n':
			prevCharIsLF = true;
			break;
		case '\t':
			column--;
			column += 8 - (column & 07);
			break;
		default:
			break;
		}

		bufline[bufpos] = line;
		bufcolumn[bufpos] = column;
	}

	public void ReInit(java.io.InputStream dstream) {
		ReInit(dstream, 1, 1, 4096);
	}

	public void ReInit(java.io.InputStream dstream, int startline, int startcolumn) {
		ReInit(dstream, startline, startcolumn, 4096);
	}

	public void ReInit(java.io.InputStream dstream, int startline,
	    int startcolumn, int buffersize) {
		ReInit(new java.io.InputStreamReader(dstream), startline, startcolumn, 4096);
	}

	public void ReInit(java.io.Reader dstream) {
		ReInit(dstream, 1, 1, 4096);
	}

	public void ReInit(java.io.Reader dstream, int startline, int startcolumn) {
		ReInit(dstream, startline, startcolumn, 4096);
	}

	public void ReInit(java.io.Reader dstream, int startline, int startcolumn,
	    int buffersize) {
		inputStream = dstream;
		line = startline;
		column = startcolumn - 1;

		if (buffer == null || buffersize != buffer.length) {
			available = bufsize = buffersize;
			buffer = new char[buffersize];
			bufline = new int[buffersize];
			bufcolumn = new int[buffersize];
		}
		prevCharIsLF = prevCharIsCR = false;
		tokenBegin = inBuf = maxNextCharInd = 0;
		bufpos = -1;
	}

}
